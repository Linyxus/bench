#!/usr/bin/env bash

set -eE


if [ -z "$PROG_HOME" ] ; then
  ## resolve links - $0 may be a link to PROG_HOME
  PRG="$0"

  # need this for relative symlinks
  while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
      PRG="$link"
    else
      PRG="`dirname "$PRG"`/$link"
    fi
  done

  saveddir=`pwd`

  PROG_HOME=`dirname "$PRG"`/..

  # make it fully qualified
  PROG_HOME=`cd "$PROG_HOME" && pwd`

  cd "$saveddir"
fi

## error

function report {
  content=$(tail -n 20 $LOG)
  message="schedule master jobs failed, check $LOG for more information"

  ghi comment $MONITOR_ISSUE -m "$message" -- $MONITOR_REPO
}

trap report ERR

## init

cd "$PROG_HOME"
source bin/config

LOG="$PROG_HOME/logs/$(date +%m-%d).out"
FILE="$PROG_HOME/history.csv"
FROM_COMMIT=$(tail -n 1 $FILE | cut -d, -f4 | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')

cd "$PROG_HOME/dotty"
git fetch origin master

merge_commits=$(git log --merges --pretty=format:'%h,%an,%ad,%s' $FROM_COMMIT..origin/master --reverse)

while IFS= read -r commit_line
do
  commit=$(echo $commit_line | cut -d',' -f1)
  author=$(echo $commit_line | cut -d',' -f2)
  time=$(echo $commit_line | cut -d',' -f3)

  if [[ $commit_line == *"Merge pull request #"* ]]; then
    pr=$(echo $commit_line | cut -d',' -f4 | grep -o 'pull request #[0-9]\+' | grep -o '[0-9]\+')

    echo "bin/gauge $pr $commit" > "$PROG_HOME/jobs/work-merge-$pr.job"
  fi
done <<< "$merge_commits"

