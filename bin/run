#!/usr/bin/env bash

set -eE

# usage: run [-f PR] [-t PR] [-s STEP]
#
# -f PR             from pull request (excluded)
# -t PR             to pull request (excluded)
# -s STEP           every n pull requests
#
# Change test plans in `bin/plan`.
#

if [ -z "$PROG_HOME" ] ; then
  ## resolve links - $0 may be a link to PROG_HOME
  PRG="$0"

  # need this for relative symlinks
  while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
      PRG="$link"
    else
      PRG="`dirname "$PRG"`/$link"
    fi
  done

  saveddir=`pwd`

  PROG_HOME=`dirname "$PRG"`/..

  # make it fully qualified
  PROG_HOME=`cd "$PROG_HOME" && pwd`

  cd "$saveddir"
fi

## init
cd $PROG_HOME

source bin/config
args="$@"
plans=$(cat bin/plan | grep "^measure")
log_file=logs/$(date +%m-%d-%H.%M)-regression.out

## errors

function report {
  content=$(tail -n 20 $log_file)
  message="regression failed for following benchmarks:

arguments: $args

$plans

Error message:

$content


[check $log_file for more information]"

  ghi comment $MONITOR_ISSUE -m "$message" -- $MONITOR_REPO
}

trap report ERR

## work

bin/schedule $args -o regression.csv > $log_file 2>&1

cat regression.csv | cat - history.csv > temp.csv && mv temp.csv history.csv

bin/deploy   > $log_file 2>&1

git add history.csv
git commit -m "[bot]add data to history" > $log_file 2>&1
git push origin master:master > $log_file 2>&1

## success message

message="regression finished successfully:

arguments: $args

$plans

Visit $WEB_URL to see the changes."

ghi comment $MONITOR_ISSUE -m "$message" -- $MONITOR_REPO

# restore plan
rm regression.csv
