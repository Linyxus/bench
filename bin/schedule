#!/usr/bin/env bash

set -e

# usage: schedule [-f COMMIT]  [-t COMMIT]
#
# -f COMMIT    from commit (excluded), default to last tested commit in history.csv
# -t COMMIT    to commit, default to HEAD
#
# e.g.
#     schedule
#     schedule -f a37d233
#     schedule -f a37d233 -t 4c8a950

if [ -z "$PROG_HOME" ] ; then
  ## resolve links - $0 may be a link to PROG_HOME
  PRG="$0"

  # need this for relative symlinks
  while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
      PRG="$link"
    else
      PRG="`dirname "$PRG"`/$link"
    fi
  done

  saveddir=`pwd`

  PROG_HOME=`dirname "$PRG"`/..

  # make it fully qualified
  PROG_HOME=`cd "$PROG_HOME" && pwd`

  cd "$saveddir"
fi

measure() {
  key=$1
  shift

  $PROG_HOME/target/pack/bin/bench "$@" -d $PROG_HOME/out | tee output.txt

  res=$(cat result.csv | grep "dotty.tools.benchmarks.Worker.compile")
  avg=$(echo $res | cut -d',' -f5)
  error=$(echo $res | cut -d',' -f6)

  runs=$(cat log.txt | grep -E '^Iteration' | sed -r 's/^Iteration.*: ([0-9\.]+).*$/\1/')
  warmups=$(cat log.txt | grep -E '^# Warmup Iteration' | sed -r 's/^# Warmup Iteration.*: ([0-9\.]+).*$/\1/')

  echo "$key, $pr, $time, $commit, $avg, $error, $(date), $warmups, $runs" >> history.csv
}

test() {
  commit=$1
  author=$2
  time=$3
  pr=$4

  # prepare dotty source code
  cd $PROG_HOME/dotty
  git reset --hard $commit
  git submodule init
  git submodule update

  # prepare compiler artifacts for benchmarking
  cd $PROG_HOME
  $PROG_HOME/bin/replace

  # start running benchmarks
  cd $PROG_HOME

  mkdir -p $PROG_HOME/out

  # Dotty Project
  measure "projects/dotty" $(find $PROG_HOME/projects/dotty/compiler/src/dotty -name *.scala)

  # microbenchmarks
  measure "tests/implicit_cache.scala" $PROG_HOME/tests/implicit_cache.scala
}


# parse command line params
while getopts "f:t:" opt; do
 case $opt in
    f)
      FROM_COMMIT=$OPTARG
      ;;
    t)
      TILL_COMMIT=$OPTARG
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done

shift $((OPTIND-1))

if [[ -z $FROM_COMMIT ]]; then
  FROM_COMMIT=$(tail -n 1 history.csv | cut -d, -f4 | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
  echo "Start commit defaults to $FROM_COMMIT"
fi

if [[ -z $TILL_COMMIT ]]; then
  TILL_COMMIT="HEAD"
  echo "End commit defaults to $TILL_COMMIT"
fi

# compile current project
sbt jmh:compile pack

cd $PROG_HOME/dotty
git reset --hard origin/master
git fetch origin
git merge origin/master
git submodule init
git submodule update
merge_commits=$(git log --merges --pretty=format:'%h,%an,%ad,%s' $FROM_COMMIT..$TILL_COMMIT --reverse)

while IFS= read -r commit_line
do
  commit=$(echo $commit_line | cut -d',' -f1)
  author=$(echo $commit_line | cut -d',' -f2)
  time=$(echo $commit_line | cut -d',' -f3)

  if [[ $commit_line == *"Merge pull request #"* ]]; then
    pr=$(echo $commit_line | cut -d',' -f4 | grep -o 'pull request #[0-9]\+' | grep -o '[0-9]\+')

    test "$commit" "$author" "$time" "$pr"
  fi
done <<< "$merge_commits"

