#!/usr/bin/env bash

# https://stackoverflow.com/questions/35800082/how-to-trap-err-when-using-set-e-in-bash
set -eE

# usage: schedule [-f COMMIT]  [-t COMMIT] [-s num]
#
# -f COMMIT    from commit (excluded), default to last tested commit in history.csv
# -t COMMIT    to commit, default to HEAD
# -s num       skip `num` of PR before the next testing PR, defaults to 0
#
# e.g.
#     schedule
#     schedule -f a37d233
#     schedule -f a37d233 -t 4c8a950

function report {
  ghi comment -m "benchmark failed" 4
}

trap report ERR

if [ -z "$PROG_HOME" ] ; then
  ## resolve links - $0 may be a link to PROG_HOME
  PRG="$0"

  # need this for relative symlinks
  while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
      PRG="$link"
    else
      PRG="`dirname "$PRG"`/$link"
    fi
  done

  saveddir=`pwd`

  PROG_HOME=`dirname "$PRG"`/..

  # make it fully qualified
  PROG_HOME=`cd "$PROG_HOME" && pwd`

  cd "$saveddir"
fi

measure() {
  key=$1
  shift

  $PROG_HOME/target/pack/bin/bench "$@" -d $PROG_HOME/out | tee output.txt

  runs=$(cat output.txt | grep -E '^Iteration' | sed -r 's/^Iteration.*: ([0-9\.]+).*$/\1/')
  warmups=$(cat output.txt | grep -E '^# Warmup Iteration' | sed -r 's/^# Warmup Iteration.*: ([0-9\.]+).*$/\1/' | tr '\n' ' ')

  median=$(echo "$runs" | datamash median 1) # datamash work on columns
  runs_flat=$(echo "$runs" | tr '\n' ' ')

  echo "$key, $pr, $time, $commit, $median, $(date), $warmups, $runs_flat" >> history.csv
}

test() {
  commit=$1
  author=$2
  time=$3
  pr=$4

  # prepare dotty source code
  cd $PROG_HOME/dotty
  git reset --hard $commit
  git submodule init
  git submodule update

  # prepare compiler artifacts for benchmarking
  cd $PROG_HOME
  $PROG_HOME/bin/replace

  # start running benchmarks
  cd $PROG_HOME

  mkdir -p $PROG_HOME/out

  # Dotty Project
  # measure "projects/dotty" $(find $PROG_HOME/projects/dotty/compiler/src/dotty -name *.scala -o -name *.java)

  # microbenchmarks
  measure "tests/implicit_cache.scala" $PROG_HOME/tests/implicit_cache.scala
  measure "tests/implicit-scope-loop.scala" $PROG_HOME/tests/implicit-scope-loop.scala
  measure "tests/i1535.scala" $PROG_HOME/tests/i1535.scala
  measure "tests/i1687.scala" $PROG_HOME/tests/i1687.scala
  measure "tests/Vector.scala" $PROG_HOME/tests/Vector.scala
}


# parse command line params
while getopts "f:t:s:" opt; do
 case $opt in
    f)
      FROM_COMMIT=$OPTARG
      ;;
    t)
      TILL_COMMIT=$OPTARG
      ;;
    s)
      SKIP=$OPTARG
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done

shift $((OPTIND-1))

if [[ -z $FROM_COMMIT ]]; then
  FROM_COMMIT=$(tail -n 1 history.csv | cut -d, -f4 | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
  echo "Start commit defaults to $FROM_COMMIT"
fi

if [[ -z $TILL_COMMIT ]]; then
  TILL_COMMIT="HEAD"
  echo "End commit defaults to $TILL_COMMIT"
fi

if [[ -z $SKIP ]]; then
  SKIP=0
  echo "skip steps defaults to $SKIP"
fi

# compile current project
sbt jmh:compile pack

cd $PROG_HOME/dotty
git reset --hard origin/master
git fetch origin
git merge origin/master
git submodule init
git submodule update
merge_commits=$(git log --merges --pretty=format:'%h,%an,%ad,%s' $FROM_COMMIT..$TILL_COMMIT --reverse)

skip_counter=$SKIP

while IFS= read -r commit_line
do
  commit=$(echo $commit_line | cut -d',' -f1)
  author=$(echo $commit_line | cut -d',' -f2)
  time=$(echo $commit_line | cut -d',' -f3)

  if [[ $commit_line == *"Merge pull request #"* ]]; then
    pr=$(echo $commit_line | cut -d',' -f4 | grep -o 'pull request #[0-9]\+' | grep -o '[0-9]\+')

    if ((skip_counter == SKIP)); then
      test "$commit" "$author" "$time" "$pr"
      skip_counter=0
    else
      skip_counter=$(expr $skip_counter + 1)
    fi
  fi
done <<< "$merge_commits"

