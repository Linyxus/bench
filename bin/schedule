#!/usr/bin/env bash

set -e

# usage: schedule [-f PR]  [-t PR] [-s NUM] [-o FILE]
#
# -f PR        from pull reuest (excluded), default to last tested commit in the output file
# -t PR        to pull request (excluded), default to run all PRs till HEAD (included)
# -s NUM       skip `num` of PR before the next testing PR, defaults to 0
# -o FILE      output data to the given file, default to history.csv
#
# e.g.
#     schedule
#     schedule -f 2874
#     schedule -f 1514 -t 2840
#     schedule -f 2110 -t 3210 -s 10
#     schedule -f 2110 -t 3210 -s 10 -o regression.csv

if [ -z "$PROG_HOME" ] ; then
  ## resolve links - $0 may be a link to PROG_HOME
  PRG="$0"

  # need this for relative symlinks
  while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
      PRG="$link"
    else
      PRG="`dirname "$PRG"`/$link"
    fi
  done

  saveddir=`pwd`

  PROG_HOME=`dirname "$PRG"`/..

  # make it fully qualified
  PROG_HOME=`cd "$PROG_HOME" && pwd`

  cd "$saveddir"
fi

trim() {
  echo -e "$1" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'
}

measure() {
  key=$1
  shift

  $PROG_HOME/target/pack/bin/bench "$@" -d $PROG_HOME/out | tee output.txt

  runs=$(cat output.txt | grep -E '^Iteration' | sed -r 's/^Iteration.*: ([0-9\.]+).*$/\1/')
  warmups=$(cat output.txt | grep -E '^# Warmup Iteration' | sed -r 's/^# Warmup Iteration.*: ([0-9\.]+).*$/\1/' | tr '\n' ' ')

  median=$(echo "$runs" | datamash median 1) # datamash work on columns
  runs_flat=$(echo "$runs" | tr '\n' ' ')
  runs_flat=$(trim "$runs_flat")

  echo "$key, $pr, $time, $commit, $median, $(date), $warmups, $runs_flat" >> $FILE
}

test() {
  commit=$1
  author=$2
  time=$3
  pr=$4

  # prepare dotty source code
  cd $PROG_HOME/dotty
  git reset --hard $commit
  git submodule init
  git submodule update

  # prepare compiler artifacts for benchmarking
  cd $PROG_HOME
  $PROG_HOME/bin/replace

  # start running benchmarks
  cd $PROG_HOME

  mkdir -p $PROG_HOME/out

  source $PROG_HOME/bin/plan
}


# parse command line params
while getopts "f:t:s:o:" opt; do
 case $opt in
    f)
      FROM_PR=$OPTARG
      ;;
    t)
      TILL_PR=$OPTARG
      ;;
    s)
      SKIP=$OPTARG
      ;;
    o)
      FILE=$OPTARG
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done

shift $((OPTIND-1))

if [[ -z $FILE ]]; then
  FILE="history.csv"
  echo "output file defaults to history.csv"
fi

if [[ -z $FROM_PR ]]; then
  FROM_PR=$(tail -n 1 $FILE | cut -d, -f2 | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
  echo "Start PR defaults to $FROM_PR"
fi

if [[ -z $SKIP ]]; then
  SKIP=0
  echo "skip steps defaults to $SKIP"
fi


# compile current project
sbt jmh:compile pack

cd $PROG_HOME/dotty
git reset --hard origin/master
git fetch origin
git merge origin/master
git submodule init
git submodule update

# c488e01 is the commit that refactors the repo
merge_commits=$(git log --merges --pretty=format:'%h,%an,%ad,%s' c488e01..HEAD --reverse)

skip_counter=$SKIP
in_range=false

while IFS= read -r commit_line
do
  commit=$(echo $commit_line | cut -d',' -f1)
  author=$(echo $commit_line | cut -d',' -f2)
  time=$(echo $commit_line | cut -d',' -f3)

  if [[ $commit_line == *"Merge pull request #"* ]]; then
    pr=$(echo $commit_line | cut -d',' -f4 | grep -o 'pull request #[0-9]\+' | grep -o '[0-9]\+')

    # finish test when TILL_PR is reached
    if [[ $pr == $TILL_PR ]]; then
       exit 0
    fi

    if [[ $in_range == "true" ]]; then

        if ((skip_counter == SKIP)); then
          test "$commit" "$author" "$time" "$pr"
          skip_counter=0
        else
          skip_counter=$(expr $skip_counter + 1)
        fi
    fi

    if [[ $pr == $FROM_PR ]]; then
       in_range=true
    fi

  fi
done <<< "$merge_commits"

