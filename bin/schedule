#!/usr/bin/env bash

set -e

# usage: schedule from  [to = HEAD]
#
# e.g.
#     schedule a37d233
#     schedule a37d233 4c8a950
#
# note: from is excluded

if [ -z "$PROG_HOME" ] ; then
  ## resolve links - $0 may be a link to PROG_HOME
  PRG="$0"

  # need this for relative symlinks
  while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
      PRG="$link"
    else
      PRG="`dirname "$PRG"`/$link"
    fi
  done

  saveddir=`pwd`

  PROG_HOME=`dirname "$PRG"`/..

  # make it fully qualified
  PROG_HOME=`cd "$PROG_HOME" && pwd`

  cd "$saveddir"
fi

parse() {
  confidence=$(cat result.csv | grep "Score Error" | cut -d',' -f6 | grep -o '[0-9]\+.[0-9]\+%')
  res=$(cat result.csv | grep "dotty.tools.benchmarks.Worker.compile")
  avg=$(echo $res | cut -d',' -f5)
  error=$(echo $res | cut -d',' -f6)
}

test() {
  local commit=$1
  local author=$2
  local time=$3
  local pr=$4

  # prepare dotty source code
  cd $PROG_HOME/dotty
  git reset --hard $commit
  git submodule init
  git submodule update

  # prepare compiler artifacts for benchmarking
  cd $PROG_HOME
  $PROG_HOME/bin/replace

  # start running benchmarks
  cd $PROG_HOME

  mkdir -p $PROG_HOME/out

  # Dotty Project
  $PROG_HOME/target/pack/bin/bench $(find $PROG_HOME/projects/dotty/compiler/src/dotty -name *.scala) -d $PROG_HOME/out
  parse && echo "projects/dotty, $pr, $time, $commit, $avg, $error, $confidence, $(date)" >> history.csv

  # microbenchmarks
  $PROG_HOME/target/pack/bin/bench $PROG_HOME/tests/implicit_cache.scala -d $PROG_HOME/out
  parse && echo "tests/implicit_cache.scala, $pr, $time, $commit, $avg, $error, $confidence, $(date)" >> history.csv
}

# compile current project
sbt pack

# schedule test for all pull requests
LAST_COMMIT="$1"

if [[ -z $1 ]]; then
   TILL_COMMIT="HEAD"
else
   TILL_COMMIT="$1"
fi

cd $PROG_HOME/dotty
git reset --hard origin/master
git fetch origin
git merge origin/master
git submodule init
git submodule update
merge_commits=$(git log --merges --pretty=format:'%h,%an,%ad,%s' $LAST_COMMIT..$TILL_COMMIT --reverse)

while IFS= read -r commit_line
do
  commit=$(echo $commit_line | cut -d',' -f1)
  author=$(echo $commit_line | cut -d',' -f2)
  time=$(echo $commit_line | cut -d',' -f3)

  if [[ $commit_line == *"Merge pull request #"* ]]; then
    pr=$(echo $commit_line | cut -d',' -f4 | grep -o 'pull request #[0-9]\+' | grep -o '[0-9]\+')

    test "$commit" "$author" "$time" "$pr"
  fi
done <<< "$merge_commits"

