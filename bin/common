#!/usr/bin/env bash

trim() {
  echo -e "$1" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'
}

jmh() {
  args="$@"

  cd "$PROG_HOME/dotty"

  sbt "dotty-bench-bootstrapped/jmh:run $args -d $PROG_HOME/out -nowarn"
}

measure() {
  jmh "$@" 2>&1 | tee output.txt

  if [ $? -eq 0 ]; then
    runs=$(cat output.txt | grep -E '^Iteration' | sed -r 's/^Iteration.*: ([0-9\.]+).*$/\1/')
    warmups=$(cat output.txt | grep -E '^# Warmup Iteration' | sed -r 's/^# Warmup Iteration.*: ([0-9\.]+).*$/\1/' | tr '\n' ' ')

    runs_flat=$(echo "$runs" | tr '\n' ' ')
    runs_flat=$(trim "$runs_flat")

    echo "$key, $pr, $time, $commit, $(date), $warmups, $runs_flat" >> "$FILE"
  fi
}

prepare() {
  commit=$1
  # prepare dotty source code
  cd "$PROG_HOME/dotty"
  git reset --hard $commit
  git submodule init
  git submodule update

  git clean -xdf
  sbt "dotty-bench-bootstrapped/jmh:compile" 2>&1 | tee -a "$LOG"

  # for compilation with `dotc`
  sbt "dist-bootstrapped/pack"  2>&1 | tee -a "$LOG"
}

compile() {
  "$PROG_HOME/dotty/bin/dotc" "$@" 2>&1 | tee -a "$LOG"
}

set-key() {
  key=$1
}

test() {
  commit=$1
  author=$2
  time=$3
  pr=$4

  # start running benchmarks
  cd $PROG_HOME

  mkdir -p $PROG_HOME/out

  source "$PLAN" 2>&1 | tee "$LOG"
}
