#!/usr/bin/env bash

set -eE

# Test a merge point on master
#
# usage: gauge [-o FILE] [-p PLAN]  PR COMMIT
#
#    -o FILE     output file for the data
#    -p PLAN     path to the test plan
#
# e.g.
#        gauge -o /path/to/data.csv -p bin/plan 2874 a2dbd


if [ -z "$PROG_HOME" ] ; then
  ## resolve links - $0 may be a link to PROG_HOME
  PRG="$0"

  # need this for relative symlinks
  while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
      PRG="$link"
    else
      PRG="`dirname "$PRG"`/$link"
    fi
  done

  saveddir=`pwd`

  PROG_HOME=`dirname "$PRG"`/..

  # make it fully qualified
  PROG_HOME=`cd "$PROG_HOME" && pwd`

  cd "$saveddir"
fi

## error

function report {
  content=$(tail -n 20 $LOG)
  message="test $PR $COMMIT failed, check $LOG for more information"

  ghi comment $MONITOR_ISSUE -m "$message" -- $MONITOR_REPO
}

trap report ERR

## init

# before `getopts`, so that defaults can be overwritten
source "$PROG_HOME/bin/config"
source "$PROG_HOME/bin/common"


# parse command line params
while getopts "o:p:" opt; do
 case $opt in
    o)
      FILE=$OPTARG
      ;;
    p)
      PLAN=$OPTARG
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done


shift $((OPTIND-1))

cd $PROG_HOME
PR=$1
COMMIT=$2
LOG="$PROG_HOME/logs/pr-$PR-$COMMIT.out"

cd "$PROG_HOME/dotty"

line=$(git show --no-patch --pretty=format:'%h,%an,%ad,%s' $COMMIT)
author=$(echo $line | cut -d',' -f2)
time=$(echo $line | cut -d',' -f3)

prepare "$COMMIT"
test "$COMMIT" "$author" "$time" "$PR"

cd "$PROG_HOME"
## deploy if there are changes
changes=$(git diff history.csv | wc -l)
[[ $changes == "0" ]] && exit 0

bin/deploy   >> $LOG 2>&1

git add history.csv
git commit -m "[bot] add data for PR $PR to history [ci skip]" >> $LOG 2>&1
git push origin master:master >> $LOG 2>&1

# message="benchmark finished success $(date)
# Visit $WEB_URL to see the changes."
# ghi comment -m "$message" $MONITOR_ISSUE -- $MONITOR_REPO

